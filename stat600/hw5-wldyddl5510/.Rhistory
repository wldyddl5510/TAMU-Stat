# lasso
lasso(standardized_res2$Xtilde, standardized_res2$Ytilde, beta_start2, lambda2)
lasso_c(standardized_res2$Xtilde, standardized_res2$Ytilde, beta_start2, lambda2)
# Header for Rcpp and RcppArmadillo
library(Rcpp)
library(RcppArmadillo)
# Source your C++ funcitons
sourceCpp("LassoInC.cpp")
# Header for Rcpp and RcppArmadillo
library(Rcpp)
library(RcppArmadillo)
# Source your C++ funcitons
sourceCpp("LassoInC.cpp")
# Source your LASSO functions from HW4 (make sure to move the corresponding .R file in the current project folder)
source("LassoFunctions.R")
soft_c(0.5, 0.1)
soft(0.5, 0.1)
soft_c(0.1, 0.5)
soft(0.1, 0.5)
soft_c(-3, 1)
soft(-3, 1)
soft_c(3, 1)
soft(3, 1)
# input 1: large
n1 = 100
p1 = 2000
n_lambda1 = 30
eps1 = 0.001
X1 = matrix(rnorm(n1 * p1), n1, p1)
Y1 = rnorm(n1)
beta_start1 = rep(1, p1)
standardized_res1 = standardizeXY(X1, Y1)
lambda1 = rchisq(1, 3)
# lasso
lasso(standardized_res1$Xtilde, standardized_res1$Ytilde, beta_start1, lambda1)
lasso_c(standardized_res1$Xtilde, standardized_res1$Ytilde, beta_start1, lambda1)
# Header for Rcpp and RcppArmadillo
library(Rcpp)
library(RcppArmadillo)
# Source your C++ funcitons
sourceCpp("LassoInC.cpp")
# Source your LASSO functions from HW4 (make sure to move the corresponding .R file in the current project folder)
source("LassoFunctions.R")
soft_c(0.5, 0.1)
soft(0.5, 0.1)
soft_c(0.1, 0.5)
soft(0.1, 0.5)
soft_c(-3, 1)
soft(-3, 1)
soft_c(3, 1)
soft(3, 1)
# input 1: large
n1 = 100
p1 = 2000
n_lambda1 = 30
eps1 = 0.001
X1 = matrix(rnorm(n1 * p1), n1, p1)
Y1 = rnorm(n1)
beta_start1 = rep(1, p1)
standardized_res1 = standardizeXY(X1, Y1)
lambda1 = rchisq(1, 3)
# lasso
lasso(standardized_res1$Xtilde, standardized_res1$Ytilde, beta_start1, lambda1)
lasso_c(standardized_res1$Xtilde, standardized_res1$Ytilde, beta_start1, lambda1)
# Header for Rcpp and RcppArmadillo
library(Rcpp)
library(RcppArmadillo)
# Source your C++ funcitons
sourceCpp("LassoInC.cpp")
# Header for Rcpp and RcppArmadillo
library(Rcpp)
library(RcppArmadillo)
# Source your C++ funcitons
sourceCpp("LassoInC.cpp")
# Header for Rcpp and RcppArmadillo
library(Rcpp)
library(RcppArmadillo)
# Source your C++ funcitons
sourceCpp("LassoInC.cpp")
# Header for Rcpp and RcppArmadillo
library(Rcpp)
library(RcppArmadillo)
# Source your C++ funcitons
sourceCpp("LassoInC.cpp")
# Source your LASSO functions from HW4 (make sure to move the corresponding .R file in the current project folder)
source("LassoFunctions.R")
soft_c(0.5, 0.1)
soft(0.5, 0.1)
soft_c(0.1, 0.5)
soft(0.1, 0.5)
soft_c(-3, 1)
soft(-3, 1)
soft_c(3, 1)
soft(3, 1)
# input 1: large
n1 = 100
p1 = 2000
n_lambda1 = 30
eps1 = 0.001
X1 = matrix(rnorm(n1 * p1), n1, p1)
Y1 = rnorm(n1)
beta_start1 = rep(1, p1)
standardized_res1 = standardizeXY(X1, Y1)
lambda1 = rchisq(1, 3)
# lasso
lasso(standardized_res1$Xtilde, standardized_res1$Ytilde, beta_start1, lambda1)
lasso_c(standardized_res1$Xtilde, standardized_res1$Ytilde, beta_start1, lambda1)
# input 2: small
n2 = 3
p2 = 8
n_lambda2 = 10
eps2 = 0.1
X2 = matrix(seq(n2 * p2), n2, p2)
Y2 = seq(from = n2, to = 1)
beta_start2 = seq(from = p2, to = 1)
standardized_res2 = standardizeXY(X2, Y2)
lambda2 = 0.25
# lasso
lasso(standardized_res2$Xtilde, standardized_res2$Ytilde, beta_start2, lambda2)
lasso_c(standardized_res2$Xtilde, standardized_res2$Ytilde, beta_start2, lambda2)
ans1 = fitLASSOstandardized(standardized_res1$Xtilde, standardized_res1$Ytilde, lambda1, eps = eps1)
ans1$beta
ans_c1 = fitLASSOstandardized_c(standardized_res1$Xtilde, standardized_res1$Ytilde, lambda1, eps = eps1)
# input 1: large
n1 = 100
p1 = 2000
n_lambda1 = 30
eps1 = 0.001
X1 = matrix(rnorm(n1 * p1), n1, p1)
Y1 = rnorm(n1)
beta_start1 = rep(0, p1)
standardized_res1 = standardizeXY(X1, Y1)
lambda1 = rchisq(1, 3)
# lasso
lasso(standardized_res1$Xtilde, standardized_res1$Ytilde, beta_start1, lambda1)
lasso_c(standardized_res1$Xtilde, standardized_res1$Ytilde, beta_start1, lambda1)
# input 2: small
n2 = 3
p2 = 8
n_lambda2 = 10
eps2 = 0.1
X2 = matrix(seq(n2 * p2), n2, p2)
Y2 = seq(from = n2, to = 1)
beta_start2 = seq(from = p2, to = 1)
standardized_res2 = standardizeXY(X2, Y2)
lambda2 = 0.25
# lasso
lasso(standardized_res2$Xtilde, standardized_res2$Ytilde, beta_start2, lambda2)
lasso_c(standardized_res2$Xtilde, standardized_res2$Ytilde, beta_start2, lambda2)
ans1 = fitLASSOstandardized(standardized_res1$Xtilde, standardized_res1$Ytilde, lambda1, beta_start1, eps = eps1)
ans1$beta
ans_c1 = fitLASSOstandardized_c(standardized_res1$Xtilde, standardized_res1$Ytilde, lambda1, beta_start1, eps = eps1)
ans_c1
ans1$beta
beta_start1 = rep(1, p1)
ans1 = fitLASSOstandardized(standardized_res1$Xtilde, standardized_res1$Ytilde, lambda1, beta_start1, eps = eps1)
ans1$beta
ans_c1 = fitLASSOstandardized_c(standardized_res1$Xtilde, standardized_res1$Ytilde, lambda1, beta_start1, eps = eps1)
ans_c1
ans2 = fitLASSOstandardized(standardized_res2$Xtilde, standardized_res2$Ytilde, lambda2, beta_start2, eps = eps2)
ans2$beta
ans_c2 = fitLASSOstandardized_c(standardized_res2$Xtilde, standardized_res2$Ytilde, lambda2, beta_start2, eps = eps2)
ans_c2
beta_start1 = rep(10, p1)
ans1 = fitLASSOstandardized(standardized_res1$Xtilde, standardized_res1$Ytilde, lambda1, rep(10, p1), eps = eps1)
ans1$beta
ans_c1 = fitLASSOstandardized_c(standardized_res1$Xtilde, standardized_res1$Ytilde, lambda1, rep(10, p1), eps = eps1)
ans_c1
ans2 = fitLASSOstandardized(standardized_res2$Xtilde, standardized_res2$Ytilde, lambda2, beta_start2, eps = eps2)
ans2$beta
ans_c2 = fitLASSOstandardized_c(standardized_res2$Xtilde, standardized_res2$Ytilde, lambda2, beta_start2, eps = eps2)
ans_c2
ans2 = fitLASSOstandardized(standardized_res2$Xtilde, standardized_res2$Ytilde, lambda2, rep(10, p2), eps = eps2)
ans2$beta
ans_c2 = fitLASSOstandardized_c(standardized_res2$Xtilde, standardized_res2$Ytilde, lambda2, rep(10, p2), eps = eps2)
ans_c2
ans2 = fitLASSOstandardized(standardized_res2$Xtilde, standardized_res2$Ytilde, lambda1, rep(10, p2), eps = eps2)
ans2$beta
ans_c2 = fitLASSOstandardized_c(standardized_res2$Xtilde, standardized_res2$Ytilde, lambda1, rep(10, p2), eps = eps2)
ans_c2
library(microbenchmark)
microbenchmark(
fitLASSOstandardized(standardized_res1$Xtilde, standardized_res1$Ytilde, lambda1, eps = eps1),
fitLASSOstandardized_c(standardized_res1$Xtilde, standardized_res1$Ytilde, lambda1, eps = eps1)
)
microbenchmark(
fitLASSOstandardized(standardized_res1$Xtilde, standardized_res1$Ytilde, lambda1, beta_start1, eps = eps1),
fitLASSOstandardized_c(standardized_res1$Xtilde, standardized_res1$Ytilde, lambda1, beta_start1, eps = eps1)
)
# Header for Rcpp and RcppArmadillo
library(Rcpp)
library(RcppArmadillo)
# Source your C++ funcitons
sourceCpp("LassoInC.cpp")
# Source your LASSO functions from HW4 (make sure to move the corresponding .R file in the current project folder)
source("LassoFunctions.R")
soft_c(0.5, 0.1)
soft(0.5, 0.1)
soft_c(0.1, 0.5)
soft(0.1, 0.5)
soft_c(-3, 1)
soft(-3, 1)
soft_c(3, 1)
soft(3, 1)
# input 1: large
n1 = 100
p1 = 2000
n_lambda1 = 30
eps1 = 0.001
X1 = matrix(rnorm(n1 * p1), n1, p1)
Y1 = rnorm(n1)
beta_start1 = rep(0, p1)
standardized_res1 = standardizeXY(X1, Y1)
lambda1 = rchisq(1, 3)
# lasso
lasso(standardized_res1$Xtilde, standardized_res1$Ytilde, beta_start1, lambda1)
lasso_c(standardized_res1$Xtilde, standardized_res1$Ytilde, beta_start1, lambda1)
# input 2: small
n2 = 3
p2 = 8
n_lambda2 = 10
eps2 = 0.1
X2 = matrix(seq(n2 * p2), n2, p2)
Y2 = seq(from = n2, to = 1)
beta_start2 = seq(from = p2, to = 1)
standardized_res2 = standardizeXY(X2, Y2)
lambda2 = 0.25
# lasso
lasso(standardized_res2$Xtilde, standardized_res2$Ytilde, beta_start2, lambda2)
lasso_c(standardized_res2$Xtilde, standardized_res2$Ytilde, beta_start2, lambda2)
ans1 = fitLASSOstandardized(standardized_res1$Xtilde, standardized_res1$Ytilde, lambda1, beta_start1, eps = eps1)
ans1$beta
ans_c1 = fitLASSOstandardized_c(standardized_res1$Xtilde, standardized_res1$Ytilde, lambda1, beta_start1, eps = eps1)
ans_c1
ans1 = fitLASSOstandardized(standardized_res1$Xtilde, standardized_res1$Ytilde, lambda1, rep(10, p1), eps = eps1)
ans1$beta
ans_c1 = fitLASSOstandardized_c(standardized_res1$Xtilde, standardized_res1$Ytilde, lambda1, rep(10, p1), eps = eps1)
ans_c1
ans2 = fitLASSOstandardized(standardized_res2$Xtilde, standardized_res2$Ytilde, lambda2, beta_start2, eps = eps2)
ans2$beta
ans_c2 = fitLASSOstandardized_c(standardized_res2$Xtilde, standardized_res2$Ytilde, lambda2, beta_start2, eps = eps2)
ans_c2
ans2 = fitLASSOstandardized(standardized_res2$Xtilde, standardized_res2$Ytilde, lambda1, rep(10, p2), eps = eps2)
ans2$beta
ans_c2 = fitLASSOstandardized_c(standardized_res2$Xtilde, standardized_res2$Ytilde, lambda1, rep(10, p2), eps = eps2)
ans_c2
library(microbenchmark)
microbenchmark(
fitLASSOstandardized(standardized_res1$Xtilde, standardized_res1$Ytilde, lambda1, beta_start1, eps = eps1),
fitLASSOstandardized_c(standardized_res1$Xtilde, standardized_res1$Ytilde, lambda1, beta_start1, eps = eps1)
)
seq_ans1 = fitLASSOstandardized_seq(standardized_res1$Xtilde, standardized_res1$Ytilde, NULL, n_lambda = n_lambda1, eps = eps1)
mine_seq_ans1 = fitLASSOstandardized_seq_c(standardized_res1$Xtilde, standardized_res1$Ytilde, seq_ans1$lambda_seq, n_lambda = n_lambda1, eps = eps1)
seq_ans1
mine_seq_ans1
mine_seq_ans1 = fitLASSOstandardized_seq_c(standardized_res1$Xtilde, standardized_res1$Ytilde, seq_ans1$lambda_seq, eps = eps1)
seq_ans1
mine_seq_ans1
seq_ans1$beta_mat
mine_seq_ans1
seq_ans1$beta_mat == mine_seq_ans1
seq_ans1$beta_mat
mine_seq_ans1
seq_ans2 = fitLASSOstandardized_seq(standardized_res2$Xtilde, standardized_res2$Ytilde, NULL, n_lambda = n_lambda1, eps = eps2)
mine_seq_ans2 = fitLASSOstandardized_seq_c(standardized_res2$Xtilde, standardized_res2$Ytilde, seq_ans2$lambda_seq, eps = eps1)
seq_ans2$beta_mat == mine_seq_ans2
seq_ans2$beta_mat
mine_seq_ans2
mine_seq_ans2 = fitLASSOstandardized_seq_c(standardized_res2$Xtilde, standardized_res2$Ytilde, seq_ans2$lambda_seq, eps = eps2)
seq_ans2$beta_mat == mine_seq_ans2
microbenchmark(
fitLASSOstandardized_seq(standardized_res1$Xtilde, standardized_res1$Ytilde, seq_ans1$lambda_seq, n_lambda = n_lambda1, eps = eps1),
fitLASSOstandardized_seq_c(standardized_res1$Xtilde, standardized_res1$Ytilde, seq_ans1$lambda_seq, eps = eps1)
)
# Tests on riboflavin data
##########################
require(hdi) # this should install hdi package if you don't have it already; otherwise library(hdi)
data(riboflavin) # this puts list with name riboflavin into the R environment, y - outcome, x - gene erpression
# Make sure riboflavin$x is treated as matrix later in the code for faster computations
class(riboflavin$x) <- class(riboflavin$x)[-match("AsIs", class(riboflavin$x))]
# Standardize the data
out <- standardizeXY(riboflavin$x, riboflavin$y)
# This is just to create lambda_seq, can be done faster, but this is simpler
outl <- fitLASSOstandardized_seq(out$Xtilde, out$Ytilde, n_lambda = 30)
out2 = fitLASSOstandardized_seq_c(out$Xtilde, out$Ytilde, outl$lambda_seq)
outl
out2
outl$beta
out2
outl$beta == out2
which(outl$beta != out2)
# The code below should assess your speed improvement on riboflavin data
microbenchmark(
fitLASSOstandardized_seq(out$Xtilde, out$Ytilde, outl$lambda_seq),
fitLASSOstandardized_seq_c(out$Xtilde, out$Ytilde, outl$lambda_seq),
times = 10
)
calN <- function(n) {}
calN <- function(n, p) {
if(n == 1) {
return(1/p)
} else {
return((calN(n - 1, p) + 1) / p)
}
}
calN(3)
calN(3, 1/2)
# Header for Rcpp and RcppArmadillo
library(Rcpp)
library(RcppArmadillo)
# Source your C++ funcitons
sourceCpp("LassoInC.cpp")
# Source your LASSO functions from HW4 (make sure to move the corresponding .R file in the current project folder)
source("LassoFunctions.R")
soft_c(0.5, 0.1)
soft(0.5, 0.1)
soft_c(0.1, 0.5)
soft(0.1, 0.5)
soft_c(-3, 1)
soft(-3, 1)
soft_c(3, 1)
soft(3, 1)
# input 1: large
n1 = 100
p1 = 2000
n_lambda1 = 30
eps1 = 0.001
X1 = matrix(rnorm(n1 * p1), n1, p1)
Y1 = rnorm(n1)
beta_start1 = rep(0, p1)
standardized_res1 = standardizeXY(X1, Y1)
lambda1 = rchisq(1, 3)
# lasso
lasso(standardized_res1$Xtilde, standardized_res1$Ytilde, beta_start1, lambda1)
lasso_c(standardized_res1$Xtilde, standardized_res1$Ytilde, beta_start1, lambda1)
# input 2: small
n2 = 3
p2 = 8
n_lambda2 = 10
eps2 = 0.1
X2 = matrix(seq(n2 * p2), n2, p2)
Y2 = seq(from = n2, to = 1)
beta_start2 = seq(from = p2, to = 1)
standardized_res2 = standardizeXY(X2, Y2)
lambda2 = 0.25
# lasso
lasso(standardized_res2$Xtilde, standardized_res2$Ytilde, beta_start2, lambda2)
lasso_c(standardized_res2$Xtilde, standardized_res2$Ytilde, beta_start2, lambda2)
ans1 = fitLASSOstandardized(standardized_res1$Xtilde, standardized_res1$Ytilde, lambda1, beta_start1, eps = eps1)
ans1$beta
ans_c1 = fitLASSOstandardized_c(standardized_res1$Xtilde, standardized_res1$Ytilde, lambda1, beta_start1, eps = eps1)
ans_c1
ans1 = fitLASSOstandardized(standardized_res1$Xtilde, standardized_res1$Ytilde, lambda1, rep(10, p1), eps = eps1)
ans1$beta
ans_c1 = fitLASSOstandardized_c(standardized_res1$Xtilde, standardized_res1$Ytilde, lambda1, rep(10, p1), eps = eps1)
ans_c1
typeof(ans2$beta)
typeof(ans1$beta)
typeof(ans2$beta)
typeof(ans_c1$beta)
typeof(ans_c1)
ans2 = fitLASSOstandardized(standardized_res2$Xtilde, standardized_res2$Ytilde, lambda2, beta_start2, eps = eps2)
ans2$beta
ans_c2 = fitLASSOstandardized_c(standardized_res2$Xtilde, standardized_res2$Ytilde, lambda2, beta_start2, eps = eps2)
ans_c2
ans2 = fitLASSOstandardized(standardized_res2$Xtilde, standardized_res2$Ytilde, lambda1, rep(10, p2), eps = eps2)
ans2$beta
ans_c2 = fitLASSOstandardized_c(standardized_res2$Xtilde, standardized_res2$Ytilde, lambda1, rep(10, p2), eps = eps2)
ans_c2
library(microbenchmark)
microbenchmark(
fitLASSOstandardized(standardized_res1$Xtilde, standardized_res1$Ytilde, lambda1, beta_start1, eps = eps1),
fitLASSOstandardized_c(standardized_res1$Xtilde, standardized_res1$Ytilde, lambda1, beta_start1, eps = eps1)
)
seq_ans1 = fitLASSOstandardized_seq(standardized_res1$Xtilde, standardized_res1$Ytilde, NULL, n_lambda = n_lambda1, eps = eps1)
mine_seq_ans1 = fitLASSOstandardized_seq_c(standardized_res1$Xtilde, standardized_res1$Ytilde, seq_ans1$lambda_seq, eps = eps1)
seq_ans1$beta_mat == mine_seq_ans1
seq_ans2 = fitLASSOstandardized_seq(standardized_res2$Xtilde, standardized_res2$Ytilde, NULL, n_lambda = n_lambda1, eps = eps2)
mine_seq_ans2 = fitLASSOstandardized_seq_c(standardized_res2$Xtilde, standardized_res2$Ytilde, seq_ans2$lambda_seq, eps = eps2)
seq_ans2$beta_mat == mine_seq_ans2
all(seq_ans2$beta_mat == mine_seq_ans2)
all(seq_ans1$beta_mat == mine_seq_ans1)
seq_ans1$beta_mat
seq_ans2$beta_mat
mine_seq_ans2
microbenchmark(
fitLASSOstandardized_seq(standardized_res1$Xtilde, standardized_res1$Ytilde, seq_ans1$lambda_seq, n_lambda = n_lambda1, eps = eps1),
fitLASSOstandardized_seq_c(standardized_res1$Xtilde, standardized_res1$Ytilde, seq_ans1$lambda_seq, eps = eps1)
)
# Tests on riboflavin data
##########################
require(hdi) # this should install hdi package if you don't have it already; otherwise library(hdi)
data(riboflavin) # this puts list with name riboflavin into the R environment, y - outcome, x - gene erpression
# Make sure riboflavin$x is treated as matrix later in the code for faster computations
class(riboflavin$x) <- class(riboflavin$x)[-match("AsIs", class(riboflavin$x))]
# Standardize the data
out <- standardizeXY(riboflavin$x, riboflavin$y)
# This is just to create lambda_seq, can be done faster, but this is simpler
outl <- fitLASSOstandardized_seq(out$Xtilde, out$Ytilde, n_lambda = 30)
out2 = fitLASSOstandardized_seq_c(out$Xtilde, out$Ytilde, outl$lambda_seq)
# compare result
which(outl$beta != out2)
# compare result
all(outl$beta == out2)
out2
outl$beta
# The code below should assess your speed improvement on riboflavin data
microbenchmark(
fitLASSOstandardized_seq(out$Xtilde, out$Ytilde, outl$lambda_seq),
fitLASSOstandardized_seq_c(out$Xtilde, out$Ytilde, outl$lambda_seq),
times = 10
)
soft_c(0.5, 0.1)
soft_c(0.5, 0.1)
# Header for Rcpp and RcppArmadillo
library(Rcpp)
library(RcppArmadillo)
# Source your C++ funcitons
sourceCpp("LassoInC.cpp")
# Source your LASSO functions from HW4 (make sure to move the corresponding .R file in the current project folder)
source("LassoFunctions.R")
soft_c(0.5, 0.1)
soft(0.5, 0.1)
soft_c(0.1, 0.5)
soft(0.1, 0.5)
soft_c(-3, 1)
soft(-3, 1)
soft_c(3, 1)
soft(3, 1)
soft_c(0.5, -0.1)
soft(0.5, -0.1)
soft_c(0.1, -0.5)
soft(0.1, -0.5)
soft_c(-3, -1)
soft(-3, -1)
soft_c(3, -1)
soft(3, -1)
soft_c(0.5, 0.1)
soft(0.5, 0.1)
soft_c(0.05, 0.1)
soft(0.05, 0.1)
soft_c(5, 0.1)
soft(5, 0.1)
soft(0.5, 0.1)
soft_c(0.1, -0.5)
soft(0.1, -0.5)
soft_c(-3, -1)
soft(-3, -1)
soft_c(3, -1)
soft(3, -1)
soft_c(3, 1)
soft(3, 1)
soft(-3, 1)
soft_c(-3, 1)
soft_c(0.1, 0.5)
soft(0.1, 0.5)
soft_c(-3, 2)
soft(-3, 2)
soft_c(3, 2)
soft(3, 2)
soft(3, 4)
soft_c(3, 4)
seq_ans2$beta_mat == mine_seq_ans2
all(seq_ans2$beta_mat == mine_seq_ans2)
# Header for Rcpp and RcppArmadillo
library(Rcpp)
library(RcppArmadillo)
# Source your C++ funcitons
sourceCpp("LassoInC.cpp")
# Source your LASSO functions from HW4 (make sure to move the corresponding .R file in the current project folder)
source("LassoFunctions.R")
set.seed(1)
Xtilde1 = matrix(rnorm(500), 10, 10)
Ytilde1 = matrix(rnorm(500), 10, 1)
stan = standardizeXY(Xtilde1, Ytilde1)
Xtilde1 = stan$Xtilde
Ytilde1 = stan$Ytilde
ans_r = fitLASSOstandardized_seq(Xtilde1, Ytilde1, lambda_seq = NULL, n+lambda = 30, eps = 0.001)
ans_c = fitLASSOstandardized_seq_c(Xtilde1, Ytilde1, lambda_seq = ans_r$lambda_seq, eps = 0.001)
all(ans_r == ans_c)
ans_r = fitLASSOstandardized_seq(Xtilde1, Ytilde1, lambda_seq = NULL, n_lambda = 30, eps = 0.001)
ans_c = fitLASSOstandardized_seq_c(Xtilde1, Ytilde1, lambda_seq = ans_r$lambda_seq, eps = 0.001)
all(ans_r == ans_c)
all(ans_r $beta_mat== ans_c)
Xtilde1 = matrix(rnorm(500), 10, 10)
Ytilde1 = rnorm(500, 10)
stan = standardizeXY(Xtilde1, Ytilde1)
Xtilde1 = stan$Xtilde
Ytilde1 = stan$Ytilde
ans_r = fitLASSOstandardized_seq(Xtilde1, Ytilde1, lambda_seq = NULL, n_lambda = 30, eps = 0.001)
ans_c = fitLASSOstandardized_seq_c(Xtilde1, Ytilde1, lambda_seq = ans_r$lambda_seq, eps = 0.001)
all(ans_r $beta_mat== ans_c)
ans_r $beta_mat
ans_c
which(ans_r $beta_mat== ans_c)
which(ans_r $beta_mat != ans_c)
ans_r$beta_mat[86]
ans_c[86]
ans_r
ans_r$beta_mat
ans_c
sum((ans_r$beta_mat - ans_c)^2)
set.seed(1)
Xtilde1 = matrix(rnorm(500), 10, 10)
Ytilde1 = rnorm(500, 10)
stan = standardizeXY(Xtilde1, Ytilde1)
Xtilde1 = stan$Xtilde
Ytilde1 = stan$Ytilde
ans_r = fitLASSOstandardized_seq(Xtilde1, Ytilde1, lambda_seq = NULL, n_lambda = 30, eps = 0.001)
ans_c = fitLASSOstandardized_seq_c(Xtilde1, Ytilde1, lambda_seq = ans_r$lambda_seq, eps = 0.001)
sum((ans_r$beta_mat - ans_c)^2)
all.equal(ans_r$beta_mat, ans_c)
