tcrossprod(res$u %*% diag(res$d), res$v),
times = 5
)
res$u %*% diag(res$d)
res$u * rep(res$d, rep(nrow(res$u), ncol(res$u))
res$u * rep(res$d, rep(nrow(res$u), ncol(res$u)))
res$u * rep(res$d, rep(nrow(res$u), ncol(res$u)))
res$u %*% diag(res$d)
all.equal(res$u %*% diag(res$d), res$u * rep(res$d, rep(nrow(res$u), ncol(res$u))))
microbenchmark(
res$u %*% diag(res$d) %*% t(res$v),
tcrossprod(res$u * rep(res$d, rep(nrow(res$u), ncol(res$u))), res$v),
times = 5
)
source("ADMMfunctions.r")
soft(diag(res$d))
soft(diag(res$d), 1)
all.equal(soft(diag(res$d), 1), diag(soft(res$d, 1)))
###################################
## Generate the simulated data
###################################
# Create matrix M according to M = low rank + few large elements
n = 100
p = 40
# Create rank 3 component
set.seed(1234)
out <- svd(matrix(rnorm(n*p), n, p), nu = 3, nv = 3)
trueL <- out$u %*% diag(out$d[1:3]) %*% t(out$v)
# Create sparse component
trueS <- matrix(rt(n*p, df = 1), n, p)
trueS[abs(trueS) < 2.5] <- 0
sum(trueS !=0)
# Create M by combining the above
M <- trueL + trueS
# Verify that M itself is not small rank and not even close to being rank 3
svd(M)$d
###################################
## Apply ADMM
###################################
source("ADMMfunctions.R")
outADMM <- robustPCAadmm(M, gamma = 0.1, Sinit = NULL, etainit = NULL, tau = 1, eps = 0.0001)
soft_nuclear(A)
#####################3
n1 = 50
p1 = 20
A = matrix(rnorm(n1 * p1), n1, p1)
res = svd(A)
library(microbenchmark)
microbenchmark(
res$u %*% diag(res$d) %*% t(res$v),
tcrossprod(res$u * rep(res$d, rep(nrow(res$u), ncol(res$u))), res$v),
times = 5
)
all.equal(soft(diag(res$d), 1), diag(soft(res$d, 1)))
res$u %*% diag(res$d)
res$u * rep(res$d, rep(nrow(res$u), ncol(res$u)))
tcrossprod(res$u %*% diag(res$d), res$v)
soft_nuclear(A)
soft_nuclear(A, 1)
soft_nuclear(A, 1)$newA
svd(soft_nuclear(A, 1)$newA)$d
all.equal(svd(soft_nuclear(A, 1)$newA)$d, svd(soft_nuclear(A, 1)$newd))
all.equal(svd(soft_nuclear(A, 1)$newA)$d, soft_nuclear(A, 1)$newd)
###################################
## Generate the simulated data
###################################
# Create matrix M according to M = low rank + few large elements
n = 100
p = 40
# Create rank 3 component
set.seed(1234)
out <- svd(matrix(rnorm(n*p), n, p), nu = 3, nv = 3)
trueL <- out$u %*% diag(out$d[1:3]) %*% t(out$v)
# Create sparse component
trueS <- matrix(rt(n*p, df = 1), n, p)
trueS[abs(trueS) < 2.5] <- 0
sum(trueS !=0)
# Create M by combining the above
M <- trueL + trueS
# Verify that M itself is not small rank and not even close to being rank 3
svd(M)$d
###################################
## Apply ADMM
###################################
source("ADMMfunctions.R")
outADMM <- robustPCAadmm(M, gamma = 0.1, Sinit = NULL, etainit = NULL, tau = 1, eps = 0.0001)
# What is the rank of the solution?
round(svd(outADMM$L)$d, 2)
# How many non-zero components are in the sparse part?
sum(outADMM$S != 0)
# Is the constraint satisfied approximately?
sum((M - outADMM$S - outADMM$L)^2)
###################################
## Generate the simulated data
###################################
# Create matrix M according to M = low rank + few large elements
n = 100
p = 40
# Create rank 3 component
set.seed(1234)
out <- svd(matrix(rnorm(n*p), n, p), nu = 3, nv = 3)
trueL <- out$u %*% diag(out$d[1:3]) %*% t(out$v)
# Create sparse component
trueS <- matrix(rt(n*p, df = 1), n, p)
trueS[abs(trueS) < 2.5] <- 0
sum(trueS !=0)
# Create M by combining the above
M <- trueL + trueS
# Verify that M itself is not small rank and not even close to being rank 3
svd(M)$d
###################################
## Apply ADMM
###################################
source("ADMMfunctions.R")
outADMM <- robustPCAadmm(M, gamma = 0.1, Sinit = NULL, etainit = NULL, tau = 1, eps = 0.0001)
# What is the rank of the solution?
round(svd(outADMM$L)$d, 2)
# How many non-zero components are in the sparse part?
sum(outADMM$S != 0)
# Is the constraint satisfied approximately?
sum((M - outADMM$S - outADMM$L)^2)
nrow(M)
ncol(M)
M
###################################
## Generate the simulated data
###################################
# Create matrix M according to M = low rank + few large elements
n = 100
p = 40
# Create rank 3 component
set.seed(1234)
out <- svd(matrix(rnorm(n*p), n, p), nu = 3, nv = 3)
trueL <- out$u %*% diag(out$d[1:3]) %*% t(out$v)
# Create sparse component
trueS <- matrix(rt(n*p, df = 1), n, p)
trueS[abs(trueS) < 2.5] <- 0
sum(trueS !=0)
# Create M by combining the above
M <- trueL + trueS
# Verify that M itself is not small rank and not even close to being rank 3
svd(M)$d
###################################
## Apply ADMM
###################################
source("ADMMfunctions.R")
###################################
## Apply ADMM
###################################
source("ADMMfunctions.R")
outADMM <- robustPCAadmm(M, gamma = 0.1, Sinit = NULL, etainit = NULL, tau = 1, eps = 0.0001)
# What is the rank of the solution?
round(svd(outADMM$L)$d, 2)
# How many non-zero components are in the sparse part?
sum(outADMM$S != 0)
# Is the constraint satisfied approximately?
sum((M - outADMM$S - outADMM$L)^2)
#####################3
n1 = 50
p1 = 20
A = matrix(rnorm(n1 * p1), n1, p1)
res = svd(A)
library(microbenchmark)
microbenchmark(
res$u %*% diag(res$d) %*% t(res$v),
tcrossprod(res$u * rep(res$d, rep(nrow(res$u), ncol(res$u))), res$v),
times = 5
)
all.equal(soft(diag(res$d), 1), diag(soft(res$d, 1)))
res$u %*% diag(res$d)
res$u * rep(res$d, rep(nrow(res$u), ncol(res$u)))
tcrossprod(res$u %*% diag(res$d), res$v)
all.equal(svd(soft_nuclear(A, 1)$newA)$d, soft_nuclear(A, 1)$newd)
# This is an empty script to store your own tests
source("ADMMfunctions.R")
#####################3
n1 = 50
p1 = 20
A = matrix(rnorm(n1 * p1), n1, p1)
res = svd(A)
library(microbenchmark)
microbenchmark(
res$u %*% diag(res$d) %*% t(res$v),
tcrossprod(res$u * rep(res$d, rep(nrow(res$u), ncol(res$u))), res$v),
times = 5
)
all.equal(soft(diag(res$d), 1), diag(soft(res$d, 1)))
res$u %*% diag(res$d)
res$u * rep(res$d, rep(nrow(res$u), ncol(res$u)))
tcrossprod(res$u %*% diag(res$d), res$v)
all.equal(svd(soft_nuclear(A, 1)$newA)$d, soft_nuclear(A, 1)$newd)
n1 = 100
p1 = 10
set.seed(1)
n_rank = 7
out <- svd(matrix(rnorm(n1*p1), n1, p1), nu = 7, nv = 7)
out$d
trueL <- out$u %*% diag(out$d[1:7]) %*% t(out$v)
trueS <- matrix(rt(n1*p1, df = 1), n1, p1)
trueS[abs(trueS) < 2.5] <- 0
sum(trueS > 1e-07)
# Create M by combining the above
M1 <- trueL + trueS
# Verify that M itself is not small rank and not even close to being rank 3
svd(M1)$d
outADMM <- robustPCAadmm(M1, gamma = 0.1, Sinit = NULL, etainit = NULL, tau = 1, eps = 0.0001)
# What is the rank of the solution?
round(svd(outADMM$L)$d, 2)
# How many non-zero components are in the sparse part?
sum(outADMM$S > 1e-07)
# Is the constraint satisfied approximately?
sum((M1 - outADMM$S - outADMM$L)^2)
sum(trueS > 1e-07)
# How many non-zero components are in the sparse part?
sum(outADMM$S > 1e-07)
# Is the constraint satisfied approximately?
sum((M1 - outADMM$S - outADMM$L)^2)
# How many non-zero components are in the sparse part?
sum(outADMM$S > 1e-13)
# How many non-zero components are in the sparse part?
sum(outADMM$S > 1e-07)
sum(trueS > 1e-07)
outADMM$S
trueS
# How many non-zero components are in the sparse part?
sum(outADMM$S != 0)
sum(trueS != 0)
set.seed(1)
n_rank = 7
out <- svd(matrix(rnorm(n1*p1), n1, p1), nu = 7, nv = 7)
out$d
trueL <- out$u %*% diag(out$d[1:7]) %*% t(out$v)
trueS <- matrix(rt(n1*p1, df = 1), n1, p1)
trueS[abs(trueS) < 2.5] <- 0
sum(trueS != 0)
# Create M by combining the above
M1 <- trueL + trueS
# Verify that M itself is not small rank and not even close to being rank 3
svd(M1)$d
outADMM <- robustPCAadmm(M1, gamma = 0.1, Sinit = NULL, etainit = NULL, tau = 1, eps = 0.0001)
# What is the rank of the solution?
round(svd(outADMM$L)$d, 2)
# How many non-zero components are in the sparse part?
sum(outADMM$S != 0)
# Is the constraint satisfied approximately?
sum((M1 - outADMM$S - outADMM$L)^2)
set.seed(1)
n_rank = 7
out <- svd(matrix(rnorm(n1*p1), n1, p1), nu = 7, nv = 7)
out$d
trueL <- out$u %*% diag(out$d[1:7]) %*% t(out$v)
trueS <- matrix(rt(n1*p1, df = 1), n1, p1)
trueS[abs(trueS) < 2.5] <- 0
sum(trueS != 0)
# Create M by combining the above
M1 <- trueL + trueS
# Verify that M itself is not small rank and not even close to being rank 3
svd(M1)$d
outADMM <- robustPCAadmm(M1, gamma = 0.1, Sinit = NULL, etainit = NULL, tau = 1, eps = 0.0001)
###################################
## Generate the simulated data
###################################
# Create matrix M according to M = low rank + few large elements
n = 100
p = 40
# Create rank 3 component
set.seed(1234)
out <- svd(matrix(rnorm(n*p), n, p), nu = 3, nv = 3)
trueL <- out$u %*% diag(out$d[1:3]) %*% t(out$v)
# Create sparse component
trueS <- matrix(rt(n*p, df = 1), n, p)
trueS[abs(trueS) < 2.5] <- 0
sum(trueS !=0)
# Create M by combining the above
M <- trueL + trueS
# Verify that M itself is not small rank and not even close to being rank 3
svd(M)$d
###################################
## Apply ADMM
###################################
source("ADMMfunctions.R")
outADMM <- robustPCAadmm(M, gamma = 0.1, Sinit = NULL, etainit = NULL, tau = 1, eps = 0.0001)
# What is the rank of the solution?
round(svd(outADMM$L)$d, 2)
# How many non-zero components are in the sparse part?
sum(outADMM$S != 0)
# Is the constraint satisfied approximately?
sum((M - outADMM$S - outADMM$L)^2)
n1 = 100
p1 = 20
set.seed(1)
n_rank = 7
out <- svd(matrix(rnorm(n1*p1), n1, p1), nu = 7, nv = 7)
out$d
trueL <- out$u %*% diag(out$d[1:7]) %*% t(out$v)
trueS <- matrix(rt(n1*p1, df = 1), n1, p1)
trueS[abs(trueS) < 2] <- 0
sum(trueS != 0)
# Create M by combining the above
M1 <- trueL + trueS
# Verify that M itself is not small rank and not even close to being rank 3
svd(M1)$d
outADMM <- robustPCAadmm(M1, gamma = 0.1, Sinit = NULL, etainit = NULL, tau = 1, eps = 0.0001)
# What is the rank of the solution?
round(svd(outADMM$L)$d, 2)
# How many non-zero components are in the sparse part?
sum(outADMM$S != 0)
# Is the constraint satisfied approximately?
sum((M1 - outADMM$S - outADMM$L)^2)
n1 = 100
p1 = 40
set.seed(1)
n_rank = 7
out <- svd(matrix(rnorm(n1*p1), n1, p1), nu = 7, nv = 7)
out$d
trueL <- out$u %*% diag(out$d[1:7]) %*% t(out$v)
trueS <- matrix(rt(n1*p1, df = 1), n1, p1)
trueS[abs(trueS) < 2.5] <- 0
sum(trueS != 0)
# Create M by combining the above
M1 <- trueL + trueS
# Verify that M itself is not small rank and not even close to being rank 3
svd(M1)$d
outADMM <- robustPCAadmm(M1, gamma = 0.1, Sinit = NULL, etainit = NULL, tau = 1, eps = 0.0001)
# What is the rank of the solution?
round(svd(outADMM$L)$d, 2)
# How many non-zero components are in the sparse part?
sum(outADMM$S != 0)
sum(trueS != 0)
# How many non-zero components are in the sparse part?
sum(outADMM$S != 0)
# How many non-zero components are in the sparse part?
sum(outADMM$S > 1e-07)
# How many non-zero components are in the sparse part?
sum(outADMM$S > 1e-13)
# How many non-zero components are in the sparse part?
sum(outADMM$S > 1e-20)
# How many non-zero components are in the sparse part?
sum(outADMM$S > 1e-30)
# How many non-zero components are in the sparse part?
sum(outADMM$S > 1e-50)
sum(trueS > 1e-50)
# How many non-zero components are in the sparse part?
sum(outADMM$S > 1e-50)
# Is the constraint satisfied approximately?
sum((M1 - outADMM$S - outADMM$L)^2)
set.seed(1)
n_rank = 7
out <- svd(matrix(rnorm(n1*p1), n1, p1))
out$d
n1 = 100
p1 = 20
set.seed(1)
n_rank = 7
out <- svd(matrix(rnorm(n1*p1), n1, p1))
out$d
trueL <- out$u %*% diag(out$d[1:7]) %*% t(out$v)
out <- svd(matrix(rnorm(n1*p1), n1, p1))
out$d
trueL <- out$u %*% diag(out$d[1:7]) %*% t(out$v)
trueL <- out$u %*% diag(out$d) %*% t(out$v)
out <- svd(matrix(rnorm(n1*p1), n1, p1), nu = 7, nv = 7)
out$d
trueL <- out$u %*% diag(out$d[1:7]) %*% t(out$v)
trueS <- matrix(rt(n1*p1, df = 1), n1, p1)
trueS[abs(trueS) < 2.5] <- 0
sum(trueS > 1e-50)
# Create M by combining the above
M1 <- trueL + trueS
# Verify that M itself is not small rank and not even close to being rank 3
svd(M1)$d
outADMM <- robustPCAadmm(M1, gamma = 0.1, Sinit = NULL, etainit = NULL, tau = 1, eps = 0.0001)
# What is the rank of the solution?
round(svd(outADMM$L)$d, 2)
# This is an empty script to store your own tests
source("ADMMfunctions.R")
n1 = 100
p1 = 10
set.seed(1)
n_rank = 7
out <- svd(matrix(rnorm(n1*p1), n1, p1), nu = 7, nv = 7)
out$d
trueL <- out$u %*% diag(out$d[1:7]) %*% t(out$v)
trueS <- matrix(rt(n1*p1, df = 1), n1, p1)
trueS[abs(trueS) < 2.5] <- 0
sum(trueS > 1e-50)
# Create M by combining the above
M1 <- trueL + trueS
# Verify that M itself is not small rank and not even close to being rank 3
svd(M1)$d
outADMM <- robustPCAadmm(M1, gamma = 0.1, Sinit = NULL, etainit = NULL, tau = 1, eps = 0.0001)
# What is the rank of the solution?
round(svd(outADMM$L)$d, 2)
# How many non-zero components are in the sparse part?
sum(outADMM$S > 1e-50)
# Is the constraint satisfied approximately?
sum((M1 - outADMM$S - outADMM$L)^2)
###################################
## Generate the simulated data
###################################
# Create matrix M according to M = low rank + few large elements
n = 100
p = 40
# Create rank 3 component
set.seed(1234)
out <- svd(matrix(rnorm(n*p), n, p), nu = 3, nv = 3)
trueL <- out$u %*% diag(out$d[1:3]) %*% t(out$v)
# Create sparse component
trueS <- matrix(rt(n*p, df = 1), n, p)
trueS[abs(trueS) < 2.5] <- 0
sum(trueS !=0)
# Create M by combining the above
M <- trueL + trueS
# Verify that M itself is not small rank and not even close to being rank 3
svd(M)$d
###################################
## Apply ADMM
###################################
source("ADMMfunctions.R")
outADMM <- robustPCAadmm(M, gamma = 0.1, Sinit = NULL, etainit = NULL, tau = 1, eps = 0.0001)
# What is the rank of the solution?
round(svd(outADMM$L)$d, 2)
# How many non-zero components are in the sparse part?
sum(outADMM$S != 0)
# Is the constraint satisfied approximately?
sum((M - outADMM$S - outADMM$L)^2)
# Check the code speed (only after verified the code is correct)
library(microbenchmark)
microbenchmark(
robustPCAadmm(M, gamma = 0.1, Sinit = NULL, etainit = NULL, tau = 1, eps = 0.0001),
times = 10
)
# Code to apply robust PCA via ADMM to a given input
###################################
## Generate the simulated data
###################################
# Create matrix M according to M = low rank + few large elements
n = 100
p = 40
# Create rank 3 component
set.seed(1234)
out <- svd(matrix(rnorm(n*p), n, p), nu = 3, nv = 3)
trueL <- out$u %*% diag(out$d[1:3]) %*% t(out$v)
# Create sparse component
trueS <- matrix(rt(n*p, df = 1), n, p)
trueS[abs(trueS) < 2.5] <- 0
sum(trueS !=0)
# Create M by combining the above
M <- trueL + trueS
# Verify that M itself is not small rank and not even close to being rank 3
svd(M)$d
###################################
## Apply ADMM
###################################
source("ADMMfunctions.R")
outADMM <- robustPCAadmm(M, gamma = 0.1, Sinit = NULL, etainit = NULL, tau = 1, eps = 0.0001)
# What is the rank of the solution?
round(svd(outADMM$L)$d, 2)
# How many non-zero components are in the sparse part?
sum(outADMM$S != 0)
# Is the constraint satisfied approximately?
sum((M - outADMM$S - outADMM$L)^2)
# Check the code speed (only after verified the code is correct)
library(microbenchmark)
microbenchmark(
robustPCAadmm(M, gamma = 0.1, Sinit = NULL, etainit = NULL, tau = 1, eps = 0.0001),
times = 10
)
# Unit: seconds
# expr
# robustPCAadmm(M, gamma = 0.1, Sinit = NULL, etainit = NULL, tau = 1,      eps = 1e-04)
# min       lq     mean   median       uq      max neval
# 26.06341 26.10809 26.31515 26.23357 26.28031 26.93281    10
microbenchmark(
robustPCAadmm(M, gamma = 0.1, Sinit = NULL, etainit = NULL, tau = 1, eps = 0.0001),
times = 2
)
microbenchmark(
robustPCAadmm(M, gamma = 0.1, Sinit = NULL, etainit = NULL, tau = 1, eps = 0.0001),
times = 1
)
microbenchmark(
robustPCAadmm(M, gamma = 0.1, Sinit = NULL, etainit = NULL, tau = 1, eps = 0.0001),
times = 10
)
?dt
qt(0.05 / 56, 24)
qt(0.95 / 56, 24)
qt(0.05 / 56, 24)
qt(1 - 0.05 / 56, 24)
qt(1 - 0.05 / 56, 24) * sqrt(2)
qf(0.05, 28, 24)
qf(0.95, 28, 24)
sqrt(qf(0.05, 28, 24) * 14) * 2
?poisson
?dpois
# What is the rank of the solution?
round(svd(outADMM$L)$d, 2)
# How many non-zero components are in the sparse part?
sum(outADMM$S != 0)
# Is the constraint satisfied approximately?
sum((M - outADMM$S - outADMM$L)^2)
qf(0.05, 28, 24)
sqrt(qf(0.95, 28, 24) * 14) * 2
(qf(0.95, 28, 24)
)
qf(0.95, 28, 24)
sqrt(qf(0.95, 28, 24) * 14) * 2
qf(0.95, 28, 24)
qf(0.95, 28, 24)
sqrt(qf(0.95, 28, 24) * 14) * 2
sqrt(qf(0.95, 28, 24) * 14) * 2
